 MML Compiler 「ZMMLC」
                                        by Zhidao
 使用マニュアル＆MML文法説明
                                        2001. 9.15. 作成
                                        2003. 7.25. 最終更新

------------------------------------------------------------
【1.はじめに】

ZMMLCは、テキストで記述されたMML(Music Macro Language)ソース
を解析し、標準MIDIファイル(Standerd MIDI File, SMF)を出力する
MMLコンパイラです。
MIDIデータを演奏するためのものではありません。作成したデータ
を聴くためには、別途プレイヤーが必要となります。

ZMMLCで採用しているMML文法は、とても簡単なものです。複雑なス
コアビュー、大掛かりなGUIを必要とせず、コマンドライン上にて手
軽にMIDIデータを作成することが出来ます。

動作OSとしてMS-DOS(Windowsコマンドプロンプト)、UNIX互換OSをサ
ポートしています。因みに開発環境は
MS-DOS 16bit版  tc    ; Borland TURBO C++ ver2.0
MS-DOS 32bit版  bcc32 ; Borland C++ Compiler ver5.3 for Win32
Linux           gcc ver2.95
です。

＃以下の説明では、MIDI及びSMFについて若干の知識が必要です。分
＃からない言葉が出てきたら、適当に読み飛ばして下さい(^^;

------------------------------------------------------------
【2.使用方法】

ZMMLCを用いてSMFを作成するための大まかな手順は、
1.MMLソースをテキストエディタなどで作成
2.MMLソースをZMMLCに渡し、コンパイル
という非常に単純なものです。

MMLの文法については後述するとして、仮にtest.mmlというMMLファ
イルをコンパイルしたいというときは、コマンドプロンプト上にて

C:> zmmlc test.mml
(UNIX互換OSなら % zmmlc test.mml ですね)

とするだけです。MMLの記述に間違いがなければ、デフォルトで
out.mid という名前でSMFが作成されます。

MMLファイルの拡張子は別に.mmlでなくても構いません。が、拡張
子が省略された場合、自動的に.mmlを補完してファイルを探します
(つまり、上の例は
C:> zmmlc test
だけでも良いということね)。

実行時コマンドラインオプションとして以下のものが用意されてい
ます。

-h           ヘルプ(簡易版)を出力します。
-v           コンパイルがやや賑やかになります(^^;
-f<format>   SMFのformat(0 or 1。2には未対応)を指定します。
             MMLソース中でformatが指定されている時はそちらを
             優先します。
-T<timebase> SMFのタイムベース(分解能)。
             MMLソース中で指定されている時はそちらを優先しま
             す。
-o <output>  出力SMFの名前を明示的に指定します。
             ファイルの拡張子が.midでないものが指定された場
             合、自動的に.midを補完します。

<format>、<timebase>はオプションのすぐあとに、空白を入れずに
そのまま続けてお書き下さい。また<output>は間に空白を入れて下
さい。
例：
  C:> zmmlc -f1 -o test test
  で、test.mmlをformat1でコンパイルし、test.midを出力します。

＃コンパイルが異常終了したとき〜.trkというファイルが残ること
＃がありますが、これはトラック情報を一時的に記憶するためのテ
＃ンポラリファイルですので、消してしまって結構です。

------------------------------------------------------------
【3.MMLファイルの作成方法】

MML(Music Macro Language)は、演奏情報を記述するための特殊な言
語です。とは言え、それほど難しい知識は要求されません。MIDI及
びSMFに関する知識を多少なりともお持ちならば、どなたでも簡単に
ソースを作成することが出来ます。

MMLソースは普通のテキストファイルとして記述されます。適当なテ
キストエディタを用いて作成して下さい。

コンパイラはソースを一行づつ読み込み、1)「メタコマンド」を記
述した行、及び2)「チャンネルコマンド」を記述した行と認識した
場合のみ解析します。それ以外の行はコメントとして無視します。

＃「メタコマンド」とか「チャンネルコマンド」とかいう言葉は私
＃が勝手につけた呼び方で、標準的なMIDI関連の用語ではありませ
＃ん:-)

1)メタコマンド

メタコマンドは、METAイベントに関わるものやコンパイル中の特殊
処理を記述するためのもので、用意されているのは以下の通りです。

1.1)タイトル
書式：#title <string>
  例：#title "\"蛙の詩\" arranged by Zhidao"

  曲名を書きます。ファイルの先頭に入れると良いです。
  例の様に、<string>(文字列)は'"'(ダブルクォーテーション)で囲
  んで下さい。
  ＃別に囲まなくても良いのですが、その場合は空白を見つけたと
  ＃ころで文字列を打ち切ってしまいます。また、'"'を利用したい
  ＃ときには直前に'\'をつければＯＫです。改行は受け付けません。

  以降、<string>とあるものは全く同じルールに従います。

1.2)著作権表示
書式：#copyright <string>
  #copyright "(C)L.v.Beethoven (Arr. by Zhidao)"

  著作権表示です。作曲者名、編曲者名を指定します。JASRACでは
  ありません:-)
  なるべく早い段階で入れるようにして下さい。人によっては、こ
  れを先頭に
  置くのが望ましいとしているようです。

1.3)演奏トラックリスト
書式：#play <track list>
  例：#play 1,2,3,4,10

  使用する演奏トラックを指定します。少なくとも、トラック又は
  チャンネルを指定する必要のあるコマンドが登場する前の段階で
  入れて下さい。
  例の様に、トラック番号<track list>は','(カンマ)で区切って並
  べます。トラック番号は0スタートでなく1スタートです。
  このコマンドを書かなかったときは、何も演奏されません。
  16よりも大きいトラックが指定された場合は、自動的にマルチポ
  ート用のデータであると解釈します。

  ＃トラックとか言ってますが、いわゆるMIDIトラックとは別のも
  ＃のです。format 0の時には実際のMIDIトラックは一つしか使わ
  ＃れないわけですが、MML記述の便を図るために用意した、仮想ト
  ＃ラックとでも呼びましょうか。
  ＃デフォルトではチャンネル番号と一致しますが、後述のsコマン
  ＃ドによって対応関係を変更することが可能です。
  ＃format 1の場合にはMIDIトラックと完全に一致します。このと
  ＃き、同じくsコマンドによって対応するチャンネルを指定するこ
  ＃とが可能です。分かったような分からないような説明ですが、
  ＃まぁそんなものだとご理解頂ければ幸いです(^^;

  ＜重要＞一つのMMLソースの中に二つ以上このコマンドを書かない
          ようにして下さい。メモリリークの原因になります。

1.4)非演奏トラックリスト
書式：#unplay <track list>
  例：#unplay 1,2,3,4,10

  #playで指定されたトラックから更に特定のトラックを除外すると
  きに使用します。専らデバッグ用です。

  ＜重要＞必ず#playよりも後に書いて下さい。#playよりも先に書
          かれた場合は無視されます。

1.5)format指定
書式：#format <format>
  例：#format 1

  SMF formatを指定します。<format>は0か1として下さい。
  format 2は未対応です。省略された場合、format 0とします。
  ＃formatについてはここでは解説しません。メンドイカラ(殴

  ＜重要＞チャンネルイベントが始まるよりも先に入れないと、思
          ったようなコンパイル結果が得られない可能性が非常に
          高いのでご注意。

1.6)タイムベース(時間分解能)
書式：#timebase <timebase>
  例：#timebase 480

  タイムベース(時間分解能)を指定します。これは、4分音符一つ当
  たりの分解能を示すもので、上の例ならば、4分音符の480分の一
  までイベント間時間間隔を細かく指定することが可能になります。
  <timebase>はどんな値でも良いのですが、通常 24, 48, 60, 96,
  120, 192, 240, 384, 480, 960 のどれかから選ぶことが多く、プ
  レイヤーによってはこれらの値以外の場合は正常に演奏されなか
  ったりするようです。ZMMLCでも、これら以外の値が指定されたと
  きには警告を発します。省略された場合96とします。

  ＜重要＞これは#playよりも前に入れるのがベターです。

1.7)拍子
書式：#beat <ch>, <int>/<int>
  例：#beat 1, 6/8

  チャンネルの拍子を指定します。例はチャンネル1を8分の6拍子と
  したものです。分母は2の累乗数(2,4,8,16,...)でなくてはなりま
  せん。
  以降、<ch>は全てチャンネル番号を意味します。

1.8)調
書式：#code <name>
  例：#code CMajor

  曲の調を指定します。<name>は以下のものからお選び下さい。こ
  こにないものを指定した場合エラーが出ます。
  (長調)
  "G-Major" 変ト長調, "D-Major" 変ニ長調, "A-Major" 変イ長調
  "E-Major" 変ホ長調, "B-Major" 変ロ長調, "FMajor"  ヘ長調
  "CMajor"  ハ長調,   "GMajor"  ト長調,   "DMajor"  ニ長調
  "AMajor"  イ長調,   "EMajor"  ホ長調,   "BMajor"  ロ長調
  "F+Major" 嬰ヘ長調, "C+Major" 嬰ハ長調, "G+Major" 嬰ト長調
  "D+Major" 嬰ニ長調, "A+Major" 嬰イ長調, "E+Major" 嬰ホ長調
  "B+Major" 嬰ロ長調
  (短調)
  "G-Minor" 変ト短調, "D-Minor" 変ニ短調, "A-Minor" 変イ短調
  "E-Minor" 変ホ短調, "B-Minor" 変ロ短調, "FMinor"  ヘ短調
  "CMinor"  ハ短調,   "GMinor"  ト短調,   "DMinor"  ニ短調
  "AMinor"  イ短調,   "EMinor"  ホ短調,   "BMinor"  ロ短調
  "F+Minor" 嬰ヘ短調, "C+Minor" 嬰ハ短調, "G+Minor" 嬰ト短調
  "D+Minor" 嬰ニ短調, "A+Minor" 嬰イ短調

1.9)外部ファイル読み込み
書式：#include <name>
  例：#include "def.mml"

  <name>で指定される外部ファイルを読み込みます。ファイルはカ
  レントディレクトリに置かれている必要があります。

1.10)トラック名
書式：#track <ch>,<string>
  例：#track 1, "主旋律"

  トラック名を指定します。format 1でなくては意味がありません。
  format 1のときにはトラック番号とチャンネル番号が一致するよ
  うにしてある(つもりです(汗)ので、トラック番号を<ch>で指定し
  た後、トラックに名前をつけてあげて下さい。

1.11)楽器名
書式：#instrument <ch>,<string>
  例：#instrument 1, "Europian Piano"

  楽器名を指定します。

1.12)歌詞
書式：#lyric <ch>,<string>
  例：#lyric 1, "おいらの〜胸の心の〜せつなさよ〜(爆"

  歌詞を入れます。

1.13)マーカー
書式：#marker <ch>,<string>
  例：#marker 1, "A"

  楽譜についている練習記号(Aとかを四角で囲んでたりするやつ)を
  入れます。

1.14)キュー・ポイント
書式：#cue <ch>,<string>
  例：#cue 1, "ここでシンバルがジャーーンと鳴る"

  キュー・ポイントを入れます。使い方は例からお察し下さい(^^;

1.15)テキストイベント
書式：#text <ch>,<string>
  例：#text 1, "それにしても腹減った"

  データ作成者のぼやきを入れます(嘘
  これで書いた内容はメタイベントとしてSMF内に残ります。

1.16)作用子再定義
書式：#def <key>,<string>
1.17)マクロ定義
書式：#define <key>,<string>

  これら二者については後述する「マクロ定義」のところで説明し
  ます。

1.18)繰り返し〜分岐〜繰り返し終了
書式：#repeat <int> 〜 #repcase <int>,<int>,... 〜 #repend

  例：#repeat 3
      (A)
      #repcase 1,2
      (B)
      #repcase 3
      (C)
      #repend

  複数行にまたがる記述を繰り返したいときに使います。
  例のような場合は、(A)(B)(A)(B)(A)(C)のように演奏されます。
  繰り返し回数は省略可能で、省略された場合2回と見なされます。
  #repcaseによる指定が繰り返し回数と矛盾していた場合、その箇
  所のコンパイルはスキップされます。

1.19)フィーネ
書式：#repeat <int> 〜 #fine 〜 #repend

  例：#repeat 3
      (A)
      #fine
      (B)
      #repend

  音楽記号のfine.と同じです。D.C.(ダ・カーポ)がないので
  #repeat〜#rependで挟まれます。挟まれてない場合は警告が発せ
  られ、無視されます。
  例の場合では(A)(B)(A)と演奏して曲が終了することになります。
  #rependの後に何か書かれていても無視されます。

1.20)コーダ

書式：#repeat <int> 〜 #tocoda 〜 #repend 〜 #coda

  例：#repeat
      (A)
      #tocoda
      (B)
      #repend
      (C)
      #coda
      (D)

  音楽記号のToCoda〜Codaと同じです。D.S.(ダル・セーニョ)がな
  いので#repeat〜#rependで挟まれます。挟まれていない場合は警
  告が発せられ、無視されます。
  例の場合、(A)(B)(A)(D)のように演奏され、(C)はスキップされ
  ます。繰り返し回数が3回以上指定されているとき、最後の繰り
  返しでコーダに跳びます。

  ＃これは、MMLでの五線譜の再現性を高めることを主目的として
  ＃用意したものです。
  ＃ほとんどの場合#repeat〜#repcase〜#rependで事足りてしまう
  ＃と思います。いたずらにデータ構造を複雑化する元ともなるの
  ＃で、あまり使用をお薦めしません。

1.21)同期
書式：#sync <ch>

  後述するチャンネルコマンドは、各チャンネル毎に独立したタイ
  ムスタンプを持っているのですが、このコマンドはそれらを一度、
  <ch>で指定されたチャンネルに同期させます。
  つまりこのコマンドを読んだ時点で、全てのチャンネルのタイム
  スタンプを<ch>のそれにそろえるわけです。休符がなくてもすっ
  とばします。ただし<ch>よりも先に進んだタイムスタンプを持っ
  ているチャンネルは無視されます。
  <ch>が省略された場合、または<ch>に対応するチャンネルが存在
  しない場合には、その時点で一番進んでいるチャンネルにそろえ
  ます。

1.22)コンパイル時文字列出力
書式：#echo <string>

  コンパイル時に標準エラー出力にメッセージを出力します。デバ
  ッグのときに便利です(^^

1.23)コンパイルマスク＆マスク解除
書式：#mask
      #unmask

  #mask〜#unmaskの間はコンパイルをスキップされます。専らデバ
  ッグ用です。
  #unmaskが省略された場合、#mask以降全てをスキップします。
  #unmaskに対応する#maskがない場合は警告が発せられ、無視され
  ます。
  ネストも可能です。つまり、
  #mask
  (A)
  #mask
  (B)
  #unmask
  (C)
  #unmask
  のように書くことも許されます。この場合は(A)(B)(C)全てスキッ
  プされることになります。

以上が全てのメタコマンドです。
＜重要＞ZMMLCは大文字と小文字を区別します。
        これらのメタコマンドは全て小文字で記述して下さい。

2)チャンネルコマンド

行がチャンネルリスト＋':'で始まっていた場合、その行はチャンネ
ルコマンドを記述しているものと見なされます。具体的には、

<ch1>,<ch2>,...: <command1> <command2> ...

のように書かれた行がそれに該当します。
この書式によって、複数のチャンネルに同じコマンドを同時に与え
ることが出来るわけです。2チャンネル使ってエコー効果を出すなど
の際に便利(なはず)です。

＃または、サンプルにつけたtest.mmlのような輪唱とか(^^

#playのところでもちらっと説明しましたが、、、。
<ch1>,<ch2>,...は、実際のチャンネル番号とは必ずしも一致しませ
ん。format 0の場合は、仮チャンネルとでも言い換えるべきで、後
述するsコマンドによって指定された番号が本当のチャンネル番号と
なります。sコマンドによる指定がない場合は、デフォルトで本当の
チャンネル番号と一致させます。
format 1の場合は、チャンネル番号ではなくトラック番号と完全に
一致します。このとき、各トラックに対応するチャンネルは、sコマ
ンドによる指定がない場合はトラック番号と一致させます。
この辺、トラックとチャンネルの概念を知らないとわりと意味不明
なんですが、その説明は専門書に譲ります。
初めのうちは、意識することは殆どないと思います(^^;

<command>は、コマンドを表す一つの文字（作用子）と、それに続く
引数列で表されます。
<key(1 charactor)>(ARG1)(ARG1)...
例：n60,4,+20
    ?$0B,0,128,2^8
という感じです（先頭の'n'や'?'が作用子に相当します）。
＃「作用子」は"operator"の訳のつもりで、本来は「演算子」とす
＃べきなんでしょうが、その働きを考えるになんとなく前者の方が
＃しっくりくるかなぁと、、、。

各コマンドの説明に移る前に、引数ARGの型について。
＃この説明の順番だとちょっと分かりにくいんですが、引数の型は
＃共通するものが多いので先にまとめちゃいます。適当に行きつ戻
＃りつしながらお読み頂けますでしょうか。

ARGには、VAL、KEY、LEN、ENV、INT、STRの6種類の型があります。

・VAL は、ノート番号やコントロール番号、プログラム番号、また
  は各種エフェクトのかかり具合を示す値などで、
  (+/-)($)数値
  のように指定します。()括弧がついているのは、省略可能なもの
  です。通常は数値を直接与えますが、値の種類によってはデフォ
  ルト値が存在します。
  +/-を先頭に付けると、そのデフォルト値からの相対指定となりま
  す。例えば、デフォルト値が80の時にVALを+20のように指定する
  と、100を指定したのと同じことになります。
  また$は、値を16進数によって指定するためのものです。例えば
  $60は、10進数で96を指定したのと同じです。

・KEY は、音楽用語で言うところの臨時記号です。詳しくは「2.2)
  ノート」で説明します(それ以外に使うコマンドはありません)。

・LEN は、長さを指定するためのものです。ノートならば音長、休
  符ならば休む長さ、各種エフェクトならば、エフェクトにグラデ
  ーションを付ける(連続的に値を変化させる)ときの長さなどを指
  定するときに与えます。これは、数値(符号付き指定可)、'.'(付
  点)、'^'(タイ)の三種を使って指定することが出来ます。例えば
  2..^4^64
  は、複付点2分音符+4分音符+64分音符分の長さを意味します。
  ^^
  のような指定も可能です。これはデフォルト音長が4分音符ならば、
  4^4^4
  と書いたのと同じことです。
  また、負の音長を指定することも可能です。例えば
  4^-64
  は、4分音符一つ分から64分音符一つ分を差し引いた長さ、つまり
  8...
  と書いたのと同じことになります。装飾音符などを入れるときに
  便利ですよ。ただしこの場合、トータルの長さが負になってしま
  うとエラーを出します。
  音長の最大値は、内部的には28ビット有効です。とか書いてもしょ
  うがないですよね。仮に分解能192、テンポ250としても４日間く
  らい分の長さは優にあるそうで(文献に基づく)、まぁ、足りなく
  なるということはまずないです。

・ENV は、和音、リピート、連符、チャンネル分割等で使われます。
  要は普通のコマンド列なんですが。詳細はそれぞれの説明時に。

・INT は、相対指定が不可能な整数値です。($)数値で指定します。
  繰り返し回数やシステムエクスクルーシブの引数など。

・STR は文字列です。メタコマンドのところで述べたのと同じルー
  ルに従います。

では、各コマンドの紹介に移りましょう。
先にも書いた通り、ZMMLCは大文字と小文字を区別しますのでご注意
下さい。

2.1)コメント %
書式：%

  これ以降に書かれた内容はコメントとして無視します。

2.2)ノート n
書式：n(VAL1),(KEY)(LEN1),(VAL2)(&(LEN2))(!(VAL3))
  VAL1   ノート番号       0〜127
  KEY    臨時記号         + or -
  LEN1   音長
  VAL2   ベロシティ       0〜127
  LEN2   ホールド時音長
  VAL3   オフ・ベロシティ 0〜127

  音を鳴らします。VAL1で、鳴らす音の番号を指定します。例えば
    n60
  とすれば真ん中(第4オクターブ)のドが鳴ることになります。また
  この値を相対指定した場合、後述するトランスポーズとオクター
  ブを考慮した上で実際に鳴る音が決定されます。

  臨時記号KEYは+(シャープ)、-(フラット)で指定します。例えば
    n60,++
  とすればドのダブルシャープ、つまりレと同じ音(ノート番号で言
  えば62)が鳴ります。+と-は幾つでもOKですが、三つ以上並べても
  意味は殆どないでしょう。

  LEN1は音長です。省略された場合、デフォルト音長(後述)が適用
  されます。

  VAL2はベロシティ(音の強弱)です。例えば
    n60,4,80
  で真ん中のドを4分音符一つ分、ベロシティ80で鳴らします。
  省略した場合、デフォルトベロシティ(後述)が適用されます。

  LEN2は、音を保留(ホールド)したい場合に使います。例えば
    n60,4&2. n64,4&2 n67,2
  とすると、真ん中のドを4分音符一つ分のばした後に、音を消さず
  に真ん中のミを鳴らし始め、更に4分音符一つ分のばした後に、今
  度は真ん中のソを鳴らした後に2分音符一つ分ほどひっぱってから
  全ての音を消します。このとき、ドはトータルで全音符一つ分、
  ミは付点2分音符分、ソは2分音符一つ分鳴ったことになります。
  ＃言葉で説明すると分かりにくいな、、、。実際に試してみて下
  ＃さい(^^;
  省略した場合、音を鳴らしっぱなしにします(ノート・オフメッセ
  ージを出しません)。これを止めるには、次に説明する'!'を用い
  ます。

  VAL3はオフ・ベロシティです。もっとも、オフ・ベロシティにつ
  いては対応していない音源が殆どみたいなので、あんまり意味は
  ないです。それよりも、この値の前につける'!'の方が重要で、こ
  れで鳴らしっぱなしになっていた音を消します。例えば
    n60,4& r2. n60,!
  は、
    n60,1
  と書いたのと同じことです。
  '!'が指定された場合、オフ・ベロシティ以外の、例えば音長とか
  ベロシティとかが指定された場合には警告が発せられ、それらは
  無視されます。また、'&'と'!'は同時に指定することは出来ませ
  ん。

  さて、ノートの説明は以上で終わりですが、このコマンドをこの
  まま使うのは、いかにもMML「らしくない」ですね。実際にはデフォ
  ルトで定義されているマクロ'c''d''e''f''g''a''b'を使うことの
  方が圧倒的に多いでしょう。それぞれ順番にドレミファソラシに
  対応します。

2.3)休符 r
書式：r(LEN)
  LEN    休む長さ

  休符です。って、そのまんまですが(^^;

2.4)コントロールチェンジ ?
書式：?(VAL1),(VAL2),(VAL3),(LEN1),(LEN2),(VAL4),(VAL5)
  VAL1   コントロール番号
  VAL2   初期エフェクト値                   0〜127
  VAL3   最終エフェクト値                   0〜127
  LEN1   エフェクトグラデーション長
  LEN2   次のコマンドまでのステップ長
  VAL4   エフェクトグラデーションのタイプ   0,1,2,3
  VAL5   エフェクトグラデーションのステップ

  コントロールチェンジです。
  VAL1で、コントロール番号を、VAL2でその値を指定します。例え
  ば
    ?$0B,$7f
  はエクスプレッションを最大(16進数で7f, 10進数で127)にします。

  VAL1の意味は、お使いの音源のマニュアルなどをお読み下さい。
  主要なもの
  はデフォルト定義マクロに登録してあります(それらは後ほどまと
  めて紹介します)。

  VAL2は省略出来ません。また値の有効範囲は0〜127($7f,7bit)で、
  これを越えた場合エラーが出ます。
  ＃コントロールの種類によってはもっと高い精度(14bit)で値を指
  ＃定することも可能です。音源のマニュアル等をお読み下さい。
  ＃殆ど必要性は感じませんが。

  VAL3を指定した場合は、エフェクトにグラデーションがかかりま
  す。LEN1で指定された音長だけかけて、エフェクト値をVAL2から
  VAL3まで連続的に変化させます。例えば
    ?$0B,0,$7f,2
  は、2分音符分の長さをかけてエクスプレッションを0から127(最
  大)まで変化させます。
  VAL3を指定しなかったときは、それ以降の引数は無視されます。

  LEN2は、次のイベントまでの時間間隔を与えるために指定するも
  ので、省略した場合はLEN1と同じ長さになります。ちょっと説明
  が悪いですね。実際の使い方の例としては、
    ?$0B,0,127,1,0 c1
  とすれば、全音符分の長さをかけてエクスプレッションを0から127
  まで変化させ始め、と同時に(LEN2が0なので)ドを全音符分のばし
  ます。
    c0&1 ?$0B,0,127,1
  としても同じ効果が得られます(この場合、LEN2は1です)。また、
    c0&1 ?$0B,0,127,1,2 ?1,0,127,2
  とすれば、ドを全音符分のばしている間に、エクスプレッション
  を0から127まで変化させると同時に、2分音符分の時間が経ってか
  らモジュレーションを2分音符分の長さをかけて0から127までグラ
  デーションをかけます。
  ＃これも分かりにくいですねー。実際に試して頂くのが一番:-)

  VAL4は、グラデーションのパターンを次の4種から選んで指定する
  ためのものです。
  パターン0:直線的に変化(1次曲線)。
  パターン1:始め急激に変化、段々減速します(2次曲線)。
  パターン2:始めゆっくり変化、段々加速します(2次曲線)。
  パターン3:始めと終わりがゆっくり、中程は速く変化します(3次
            曲線の両極点間)。
  これ以外の値を指定するとエラーが出ます。

  VAL5は、使うことは殆どないでしょう。変化のステップを与える
  ためのもので、省略した場合は1となります。この値はタイムベー
  スに対応しており、タイムベース96でステップが1ならば、4分音
  符一つ分の長さ当たり96段階で値を変化させることが出来るとい
  うわけです。使い道としては、意図的に階段のような変化を与え
  たい場合や、ステップを長くすることでSMFサイズを小さくするこ
  と(もはやナンセンスかも知れない)などがあるわけですが。

  以上でコントロールチェンジの説明は終わりですが、グラデーショ
  ンの指定の仕方は以降説明する同様の機能を持つコマンドについ
  て共通です。具体的には
    2.6)ポリフォニックキープレッシャ
    2.7)チャンネルプレッシャ、
    2.8)ピッチベンド
    2.9)マスターボリューム
    2.10)テンポ
  についてグラデーションをかけることが可能です。

2.5)プログラムチェンジ i
書式：i(VAL1),(VAL2),(VAL3)
  VAL1   プログラム番号 0〜127
  VAL2   バンク1
  VAL3   バンク2

  音色を換えます。これは、
    ?0,(VAL2) ?32,(VAL3) i(VAL1)
  と書くのと同じことです。
  VAL1でプログラム番号(1〜128、内部的には0〜127)を決定します。
  VAL2、VAL3は、バンクセレクトのために指定して下さい。これら
  は省略可能ですが(省略された場合、バンクは変更されません)、
  VAL2とVAL3は同時に指定しないと意味がありません(つまり、i1,2
  のようにVAL2だけ指定してVAL3を書かないのはナンセンスだとい
  うこと)。
  バンク、プログラム番号と音色との対応については音源のマニュ
  アルをお読み下さい。

2.6)ポリフォニックキープレッシャ _
書式：_(VAL1),(VAL2),(VAL3),(LEN1),(LEN2),(VAL4),(VAL5)
  VAL1   ノート番号     0〜127
  VAL2   初期プレッシャ 0〜127
  VAL3   最終プレッシャ 0〜127
  LEN1〜VAL5 説明略

  一つ一つの音にアフター・タッチをかける時に使います。効果に
  ついては次の2.7)チャンネルプレッシャとまとめて説明します。

2.7)チャンネルプレッシャ '
書式：'(VAL1),(VAL2),(LEN1),(LEN2),(VAL3),(VAL4)
  VAL1   初期プレッシャ 0〜127
  VAL2   最終プレッシャ 0〜127
  LEN1〜VAL4 説明略

  チャンネル全体にアフター・タッチをかける時に使います。
  アフター・タッチとは、音を鳴らし始めてから、例えばペダルを
  踏むことなどにより、後からなんらかのエフェクト(モジュレー
  ションとか)をかけるというものですが、音源によってその効果
  はまちまちです。音源のマニュアルをお読み下さい。

2.8)ピッチベンド P
書式：P(VAL1),(VAL2),(LEN1),(LEN2),(VAL3),(VAL4)
  VAL1   初期ピッチ -8192〜8191
  VAL2   最終ピッチ -8192〜8191
  LEN1〜VAL4 説明略

  ピッチ(音程)を変化させます。-8192〜8191の範囲で指定可能で
  す。値が正ならば音を高く、負ならば低くします。指定された値
  に対して実際にどれだけ音程を変化させるかは、ピッチベンドセ
  ンシティビティ(後述する登録済みマクロ'A')によって決定され
  ます。例えばピッチベンドセンシティビティが12ならば、12音分、
  つまり1オクターブ分を8192等分して音程を変化させることが出
  来るということです。
  キリのいい音程(半音単位)にしたいという場合は、
    8191÷(ピッチベンドセンシティビティ)×(移動した音程,半音単位)
  で適切な値を求めることが出来ます。参考までに、ピッチベンド
  センシティビティが12のときの各半音に相当する値を表で示しま
  す(割り切れない値は適当に切り捨ててます)。

    音程 |1   |2   |3   |4   |5   |6   |7   |8   |9   |10  |11  |12
    -----+----+----+----+----+----+----+----+----+----+----+----+----
    値   |682 |1365|2048|2730|3413|4095|4778|5461|6144|6827|7509|8191

  ＃音程を下げる場合には符号を反転させて下さいね:-)

2.9)マスターボリューム V
書式：V(VAL1),(VAL2),(LEN1),(LEN2),(VAL3),(VAL4)
  VAL1   初期ボリューム 0〜127
  VAL2   最終ボリューム 0〜127
  LEN1〜VAL4 説明略

  全体のボリュームを指定するもので、0〜127で指定します。
  これはユニバーサルエクスクルーシブを利用するものなので、音
  源によっては対応していないものもあります。

2.10)テンポ t
書式：t(VAL1),(VAL2),(LEN1),(LEN2),(VAL3),(VAL4)
  VAL1   初期テンポ
  VAL2   最終テンポ
  LEN1〜VAL4 説明略

  曲のテンポを決定します。SMF固有のメタイベントによって記述さ
  れるもので、MIDI規格で定められているものではありません。ま
  あ、使う側にしてみれば知ったこっちゃないんですが(^^;
  どのチャンネルでも指定可能ですが、なるべくならばチャンネル
  1で指定する方が望ましいでしょう。
  なお値の範囲は内部的には24ビット有効、、、なんて書いてもしょ
  うがないですね(^^ 良識的な範囲ならば問題ないはずです(そもそ
  も良識ある範囲でなければ演奏時に破綻するし)。

2.11)トランスポーズ T
書式：T(VAL)
  VAL    トランスポーズ量(半音単位)

  実際に鳴る音を表記された音から半音単位でずらします。例えば
    T2 c4
  とすれば、実際にはレが鳴ることになります。

  これはZMMLCが管理するものであって、SMFに情報として書き込ま
  れるものではありません。音源の方のトランスポーズとは全く別
  のものです。キーシフトと呼んだ方が良いかも知れません。

2.12)オクターブ指定 o
書式：o(VAL)
  VAL    オクターブ

  デフォルトのオクターブを指定します。初期値は4です。
  n+2,4のようにノート番号が相対指定された場合、実際に鳴る音の
  番号は次式にて決定されます。
    ((オクターブ)+1)×12+(相対指定値)+(トランスポーズ量)
  例えば
    o4 T2 n+0
  ならば、実際には
    (4+1)×12 + 0 + 2 = 62
  で、真ん中のレが鳴ることになります。
  トランスポーズ、オクターブ共に負の値を指定することも可能で
  す。が、実際に鳴る音番号が0〜127の範囲を超えたときにはエラ
  ーが出ます。
  ＃勘の良い方ならお気づきでしょうが、'c'は'n+0,'として展開さ
  ＃れるマクロです。後の'd'〜'b'も同様。

2.13)デフォルト音長 l
書式：l(LEN)
  LEN    音長

  デフォルトの音長を指定します。初期値は4、つまり4分音符一つ
  分です。
    l8 cccc l16 cccccccc
  などとすれば、ドを8分音符で4回、更に16分音符で8回続けて鳴ら
  します。また、直前までのデフォルト音長をデフォルトとして利
  用することも可能です。
    l4 c l. c l. c
  のようにした場合、一つ目のドは4分音符一つ分の長さで、二つ目
  のドは付点4分音符一つ分の長さで、三つ目のドは付点4分音符一
  つ分の1.5倍の長さで演奏されることになります。
  ＃三つ目は複付点4分音符一つ分の長さになるようにした方が良い
  ＃のでしょうかね、、、その辺はニーズに応えたいと思いますが
  ＃(あるなら(^^;)。

2.14)デフォルトベロシティ v
書式：v(VAL)
  VAL    ベロシティ 0〜127

  デフォルトのベロシティを指定します。初期値は120です。ベロシ
  ティの範囲が0〜127ですから、これは結構強めですね。
  相対指定も可能で、例えば現在のデフォルトベロシティが100なら
  ば、
    v-20
  は
    v80
  と同じです。

2.15)ゲートタイム q
書式：q(VAL1),(VAL2)
  VAL1   ゲートタイム(分子)
  VAL2   分解能(分母)        1〜255

  実際に鳴る音の長さを指定します。例えば
    q6,8 c,4
  としたら、実際には4分音符一つ分の8分の6、つまり付点8分音符
  一つ分と同じ長さだけドを鳴らした後に、16分音符一つ分休みま
  す。
    q4,8 cccc
  などとすれば、スタカートのような効果が得られます。
  分母は省略可能で、前に指定したときの分母が継続して採用され
  ます。
    q4,8 c q8,16 c q4 c
  とすれば、三回目のq4はa4,16と同じだという意味です。
  分母は1〜255の範囲で指定可能です。間違って0に指定されてし
  まったときには、大急ぎで処理を中止します(なぜだか分かるよ
  ね、、、)。

  分子、分母共に初期値は8です(つまり指定された音長いっぱいま
  で音を鳴らし続けるということ)。

  また、分子が分母よりも大きくなった場合、ホールドのような効
  果が得られます。例えば
    q2,1 ceg>c
  とすれば、前に鳴った音は次に鳴る音と完全に重なるように延ば
  されます。

2.16)和音 {}
書式：{(ENV)}(LEN1),(VAL1)(&(LEN2))(!(VAL2))
  ENV    チャンネルコマンド
  LEN1   音長
  VAL1   ベロシティ        0〜127
  LEN2   ホールド時音長
  VAL2   オフ・ベロシティ  0〜127

  和音です(^^;
  例えば
    {ceg}4
  とすればドミソの和音が鳴ります。
  引数LEN1〜VAL2は、ノート指定で説明したものと全く同じです。
    { c4 e g,+20&2 }2,-20
  なんて書いた場合は、各ノート指定引数の省略された箇所だけ、
  和音全体に対する引数で補完されます。つまりこの場合は
    { c4,-20 e2,-20 g2,+20&2 }
  と書いたのと全く同じです。
  ＃実際にどのように演奏されるかはご確認下さい。

  和音とか言ってますが、実はノート以外のものも{}の中に入れる
  ことが出来ます。要は、イベントの始まるタイミングの頭がそろ
  えられていると思って頂ければ。
  ＃和音のネスト(和音の中に和音を入れること)も可能なんですが、
  ＃あまり意味ないですね(^^;

    o4 {ceg>c}4c4
  のようにした場合、和音の後のc4はo5ではなくo4と認識されます。
  つまり、オクターブ情報は和音に入る前のものが保存されます。
  これは、デフォルト音長、トランスポーズ、ゲートタイムについ
  ても同じです。

  また
    {ceg}& r1 {ceg}!
  のような書き方も出来ます。この場合はもちろん
    {ceg}1
  と同じように演奏されます。

2.17)連符 S
書式：S{(ENV)}(LEN)
  ENV    チャンネルコマンド・シーケンス
  LEN    実際のトータルの長さ

  連符です(^^;
  例えば
    S{cdefg}4
  とすれば、4分音符一つ分の長さの5連符を演奏します。
    S{cde2fg}4
  なんていう書き方もＯＫです。この場合、4分音符一つ分の長さを
  {}の内側のトータルの音長で等分し、それぞれの音の長さを割り
  当てます。つまり、デフォルト音長がl4ならば実際には6連符の真
  ん中二つの音(ミの音のことね)がつながったような演奏になりま
  す。
    c24d24e12f24g24
  と書くのと同じだということです。

  ENV中では、ノート指定の他に休符、和音、トランスポーズ、オク
  ターブ、デフォルトベロシティ、ゲートタイム、エクスクルーシ
  ブが利用可能です。ただし、連符の中で最後に指定されたものが、
  連符の外に出てもそのまま有効になります。
  また、連符のネスト(連符の中に連符を入れること)も可能ですが、
  あんまり深いネストにするとやばいかも:-)

  オクターブ情報、デフォルト音長、トランスポーズ、ゲートタイ
  ムについては和音の時と同様、連符に入る直前のものが保存され
  ます。

2.18)リピート [/]
書式：[(ENV1)(/(INT1)(,INT2)...) ... ](VAL)
  VAL    繰り返し回数

  繰り返しを指定します。例えば
    [cdef /1 edcr /2 gggr]
  で、実際には
    cdef edcr cdef gggr
  のように演奏されることになります。また、
    [cdef /1,2 edcr /3 gggr]
  のようなことも、
    [cder /1,2 ed /3gggr /1,2 cr]
  のようなことも出来ます(これら二つは全く同じ演奏をします)。

  '/'の後の数字は省略出来ます。例えば
    [ cdef / edcr / gggr ]
  のようにした場合、一回目の'/'は'/1'と、二回目の'/'は'/2'と
  見なされます。また、
    [ cdef /edcr /2,3 gggr / gfedc1 ]
  のような場合は、三回目の'/'は'/3'と見なされます('/4'ではあ
  りません)。タネを明かせば、一つ前の'/'の先頭の数に1足した回
  数と見なすのです。この規則により
    [ cdef /edcr /3,2 gggr / gfedc1 ]
  ならば三回目の'/'は'/4'と見なされることになります。また、
    [ cdef /3,2edcr /1 gggr / gfedc1 ]
  ならば三回目の'/'は'/2'です。

  ']'の後の回数は省略出来ます。この場合、'/'の指定と矛盾が起
  きない最小回数が全体の繰り返し回数になります。
  ＃またも分かりにくい説明(--; つまり'/'の最大値と等しい回数
  ＃繰り返されるということです。
  '/'がなかった場合はデフォルトで2回と見なされます。
  また、この値が指定されていて、しかもそれが'/'の最大値より
  も小さい場合、'/'の指定と矛盾が起きるので警告が出ます。

  繰り返しもネスト出来ますが、あんまり深いネストにするとやば
  いです:-)

  ＜重要＞複数行にまたがる繰り返し指定は、後述の「改行'\'」
          を使わない限り出来ません。ごめんなさいm(__)m

  オクターブ情報、デフォルト音長、トランスポーズ、ゲートタイ
  ムについては和音の時と同様、リピートに入る直前のものが保存
  されます。例えば
    o4 [ceg>c]4
  とした場合、繰り返しの先頭に戻る度にオクターブもo4に戻りま
  す。

2.19)チャンネル分割 D
書式：D{ENV1}{ENV2}...{ENVn}

  ENV1からENVnまでを順に評価していきますが、一つのENVを評価し
  た後にタイムスタンプをDの呼び出し前まで戻します。その後、
  ENV1〜ENVnの中で最も進んだタイムスタンプまで進めます。
  例えば
    D{c1}{?$0B,0,127,1}
  とやればこれは、ドを全音符分のばしながらエクスプレッション
  を0から127まで増加させます(c0&1 ?$0B,0,127,1 や ?$0B,0,127,1,0 c1
  などと効果は同じです)。また、
    D{q8 c1}{q4 r[{eg}]3}
  などとすれば、、、想像はつきますよね(^^;

  デフォルトベロシティ、オクターブ情報、デフォルト音長、トラ
  ンスポーズ、ゲートタイムについては和音の時と同様、チャンネ
  ル分割に入る直前のものが保存されます。例えば
    l4 D{l8[r{ge}]4}{[c]4}
  とした場合、二つ目の{}の中のcは、デフォルト音長がl4であると
  して解釈されます。

2.20)システムエクスクルーシブ E
書式：E(INT1),(INT2),...

  システムエクスクルーシブを出力します。先頭の$F0、最後の$F7
  はいりません。例えば
    E$41,$10,$42,$12,$40,$00,$7f,$00,$41
  でGSリセットです。詳しくは音源のマニュアルをどうぞ:-)。

2.21)GS専用システムエクスクルーシブ G
書式：G(INT1),(INT2),...

  私自身がSK-88Pro使っているもので、作っちゃいました。GS以外
  の音源ユーザの皆様、ごめんなさいm(__)m
  先頭の$F0、最後の$F7に加え、チェックサムがいらなくなります。

  また'E'、'G'とも、整数列の代わりに文字列を指定することが可
  能です。この場合、文字列はそれと等価なASCIIコード列と見なさ
  れます。例えば
    G$41,$10,$45,$12,$10,$00,$00,"Let's dancin'!"
  とかやると、SC-88系音源の液晶ディスプレイ上に文字を送ること
  が出来ます。

2.22)マクロコール M
書式：M{(STR)(,(STR1)(,(STR2)(,...)))}
  STR    マクロ定義文字列
  STR1〜 マクロ引数

  定義してあるマクロを呼び出すときに用います。詳しくは後述の
  「マクロ定義」にて説明致します。

2.23)チャンネル指定 s
書式：s(INT)
  INT   チャンネル番号  1〜16

  実際に音を鳴らすチャンネルを変更します。デフォルトではもち
  ろん、行頭のチャンネル番号と同じですが、例えば
    10: s1
  などとすると、今後 10:として書いた内容はチャンネル1に対して
  与えられたものと解釈します。ただしトランスポーズ、オクター
  ブ、デフォルト音長、デフォルトベロシティ、ゲートタイムは、
  記述チャンネル毎に独立に記憶するので、
    1: l4
    10:s1 l8
  などとした場合は、1:ではデフォルト音長が4分音符一つ分、10:
  では8分音符一つ分となり、相互に影響し合いません。

  ＜重要＞マルチポートの扱いについてですが、トラック1〜16はポ
          ート0に、トラック17〜32はポート1にそれぞれ対応させ
          ます(実際に整合性が取れるかどうかはプレイヤ次第では
          ありますが)。従って例えば
            20: s1
          とした場合は、以降20:に書かれた内容はポート1のチャ
          ンネル1で演奏されることになります。

2.24)改行指定 \
書式： \

  先に述べた通り、基本的に各行は先頭に、メタコマンドであるこ
  と示す#があるか、チャンネル番号のリスト+':'がなければコメン
  トと見なされ、複数行にまたがる記述は出来ないのですが、行末
  に'\'をつけることにより、複数行に分かれた記述を解釈すること
  が出来ます。例えば、
    1:l8 [cdefgfed cdefg2 \
          / fedef4g4 edcde2 \
          / fedefedg c1 ]
  とか
    1:l4 D{q8 c1           } \
          {q4 r{ge}{ge}{ge}}
  とかいう書き方が有効になります。ただし、文字列中に使用する
  ことは出来ません。
  また、同じ行中で'\'以降に書かれた文字は無視されます。
  ＃だからといって、コメントのような使い方をするのはお勧めし
  ＃ません。

------------------------------------------------------------
【4.マクロ定義】

特定の文字列にマクロを割り当て、登録することが可能です。

1.17)マクロ定義
書式：#define <key>,<string>
  <key>     マクロを割り当てる文字列
  <string>  実際に解凍される文字列

またこのマクロは、チャンネルコマンド
  M{<key>}
によって呼び出すことが出来ます。
例えば、
  #define g7, {cegb-}
  1: M{g7}1
は、
  1: {cegb-}1
と書いたのと同じことです。

＃当然ながら、マクロ定義はチャンネルコマンド中で呼び出す前に
＃行われていなくてはいけません。

引数付きマクロも登録出来ます。引数の指定には'@'を使います。例
えば、
#define g7v@1@2@3@4, "{c,@1 e,@2 g,@3 b-,@4}"
のように定義して
  1: M{g7v,-20,,+10,+20}
とすれば、
  1: {c,-20 e, g,+10 b-,+20}
と書いたのと同じです。引数名には何を使っても構いませんが、引
数と引数の間に空白は入れないようにして下さい(展開先には入れて
も大丈夫です)。
因みに展開される文字列の中に','(コンマ)を含めたい場合は、例の
ように文字列全体を'"'で囲んで下さい。
引数は単なる文字列で、当該箇所に埋め込まれるだけなので、同じ
マクロ定義例を使って
  1: M{g7v,d,f,a,+20}
なんて書くことも問題なく出来ます。この場合は
  1: {c,d e,f g,a b-,+20}
のように展開されます(すごい汚い和音なので実際にこの例で試さな
いように)。

既に同じ名前での登録があった場合、警告を出し、上書きします。

実は、ZMMLCでは一文字単位でトークンを切り出す(文字列と数値は
例外)ので、マクロが一文字だった場合は'M'を使わなくても大丈夫
です。それは次に示す登録済みマクロ一覧を見て頂いても明らかで
しょう。

・登録済みマクロ一覧

"a"        "n+9,"                    ラの音
"b"        "n+11,"                   シの音
"c"        "n+0,"                    ドの音
"d"        "n+2,"                    レの音
"e"        "n+4,"                    ミの音
"f"        "n+5,"                    ファの音
"g"        "n+7,"                    ソの音
  説明は不要ですよね(^^;

"m"        "?$01,"                   モジュレーション
  音に変調をかけます。ビブラートに似た効果が得られます。

"p"        "?$0A,"                   パンポット
  音の鳴る場所を左右に振り分けます。0が最左、127が最右です。
  デフォルトは64(のはず)です。

"x"        "?$0B,"                   エクスプレッション
  演奏にダイナミクスによる表現をつけるためのものです。クレシェ
  ンドやディクレシェンドをつけるときに用います。

"A"       "?$65,0 ?$64,0 ?$06," ピッチベンドセンシティビティ
  ピッチベンドをかけたときの音程の上下最大変化幅を半音単位で
  指定します。

"C"        "?$5D,"                   コーラス・センドレベル
  コーラスのレベルを指定します。音に厚みが出ます。

"L"        "?$5E,"                   ディレイ・センドレベル
  ディレイのレベルを指定します。エコーのような効果が得られます。

"N@1@2@3", "?$63,@1 ?$62,@2 ?$06,@3" NRPN
  Non Registered Parameter Numberの略。働きは音源によって全く
  異なります。音源のマニュアルをご参照下さい。
  例えばRoland系音源では
    N1,32,64
  でカットオフ周波数を0にします。

"R"        "?$5B,"                   リバーブ・センドレベル
  リバーブのレベルを指定します。音に奥行きが出ます。

"W"    "?$65,0 ?$64,0 ?$06," モジュレーションセンシティビティ
  モジュレーションをかけたときの変調幅を指定します。

"X"        "?$07,"                   チャンネルボリューム
  チャンネル毎のボリュームを指定します。エクスプレッションと
  効果は全く同じなのですが、言ってみればチャンネルボリューム
  は、マイクを通した後にミキサーで調整する音量、エクスプレッ
  ションは、マイクを通す前の楽器が生でつけているダイナミクス、
  という意味上の差があります。旨く使い分けましょう(余計なお世
  話？)。

";"        "?$7B,0 "                 オール・ノートオフ
  発音中の音を全て止めます。残響(リリース)は残ります。

"*"        "?$78,0 "                 オール・サウンドオフ
  発声中の音を全て止めます。残響(リリース)も残りません。

")"        "v+8 "                    ベロシティインクリメント
  ベロシティを8増やします。

"("        "v-8 "                    ベロシティデクリメント
  ベロシティを8減らします。これらの二つによって、16段階でベロ
  シティを相対的に変化させることが可能になります。

">"        "o+1 "                    アッパー・オクターヴァ
  1オクターブ上げます。

"<"        "o-1 "                    ローワ・オクターヴァ
  1オクターブ下げます。

これらは全て一文字で定義されているので、M{c}4やM{N,0,32,80}な
どと書かなくてもOKです(書いても構いませんが、、、)。それぞれ
c4、N0,32,80 とだけ書けば正しく解釈されます。

  #define CutOffFreq, "N1,32,"
のように、マクロの多段定義もいけます。
＜重要＞再帰的定義、即ち
        #define 1, M{1}
        のような定義や、相互再帰的定義、即ち
        #define 1, M{2}
        #define 2, M{1}
        のような定義を行ったら無限ループに陥ります。ご注意。

マクロ定義とは別に、作用子再定義というものもあります。

1.16)作用子再定義
書式：#def <key>,<string>
  <key>    作用子
  <string> 作用子IDを示す文字列

<key>は一文字でなければなりません(それより長いとエラーが出ま
す)。作用子IDを示す文字列には、次のようなものがあります。

 文字列        | 働き                           | 初期定義
---------------+--------------------------------+----------
 CHANNEL       | チャンネル                     | :
 COMMENT       | コメント                       | %
 NOTE          | ノート指定                     | n
 REST          | 休符      　　                 | r
 POLYKEYPRESS  | ポリフォニックキープレッシャ   | _
 CONTROLCHANGE | コントロールチェンジ           | ?
 PROGRAMCHANGE | プログラムチェンジ             | i
 CHANNELPRESS  | チャンネルプレッシャ           | '
 PITCHBEND     | ピッチベンド                   | P
 MASTERVOLUME  | マスターボリューム             | V
 TEMPO         | テンポ                         | t
 TRANSPOSE     | トランスポーズ                 | T
 BASENOTE      | オクターブ指定                 | o
 DEFAULTLEN    | デフォルト音長                 | l
 DEFAULTVEL    | デフォルトベロシティ           | v
 GATETIME      | ゲートタイム                   | q
 CHANGECHANNEL | チャンネル指定                 | s
 DIVIDECHANNEL | チャンネル分割                 | D
 EXCLUSIVE     | システムエクスクルーシブ       | E
 GS EXCLUSIVE  | GS専用システムエクスクルーシブ | G
 MACROCALL     | マクロコール                   | M
 SEQUENCE      | 連符                           | S
 CHORD_BEGIN   | 和音の最初                     | {
 CHORD_END     | 和音の終了                     | }
 REPEAT_BEGIN  | 繰り返しの最初                 | [
 REPEAT_CASE   | 繰り返し分岐                   | /
 REPEAT_END    | 繰り返しの終了                 | ]
 ENV_BEGIN     | 環境（連符等で使用）の最初     | {
 ENV_END       | 環境の終了                     | }
 OFF           | 音消去                         | !
 HOLD          | 音保留（ホールド）             | &
 INCREMENT     | 相対的に加算                   | +
 DECREMENT     | 相対的に減算                   | -
 TIE           | タイ                           | ^
 SHARP         | シャープ                       | +
 FLAT          | フラット                       | -
 HALF          | 付点                           | .
 HEXADECIMAL   | 16進数                         | $
 QUOTATION     | 文字列                         | "
 DELIMITER     | 引数区切り                     | ,
 VAR           | マクロ変数                     | @
 NL            | 改行指定                       | \

ご自分の流儀に合わせて、これらを再定義することが可能です。

多重定義(一つの文字に複数の意味を割り当てること)も一応可能で
す。事実、'+'や'-'には値の相対指定と臨時記号の二つの意味を定
義しています。

作用子再定義の仕方を誤ると、それ以降正しくMMLを正しく解釈出来
なくなることがあります。例えば
  #def &, TIE
のようにすると、ホールドが認識出来なくなります。この場合はホ
ールドの方も別の作用子で再定義しなくてはいけません。ご注意下
さい。

------------------------------------------------------------
【5.おわりに】

以上でMMLの説明は終わりです。

何かご意見、ご要望等ございましたらお気軽にご連絡下さい。良い
ものであればどんどん採用させて頂きたいと思います。また、バグ
報告もお待ちしております。

E-mail zhidao@land.linkclub.or.jp
URI    http://www1.linkclub.or.jp/~zhidao/zclef/index.html [Z-clef]
       http://www1.linkclub.or.jp/~zhidao/zclab/index.html [Z-Lab]

------------------------------------------------------------
【付記:コマンド＆登録済みマクロ逆引】

#beat                              1.7)拍子
#coda                              1.20)コーダ
#code                              1.8)調
#copyright                         1.2)著作権表示
#cue                               1.14)キュー・ポイント
#def                               1.16)作用子再定義
#define                            1.17)マクロ定義
#echo                              1.22)コンパイル時文字列出力
#fine                              1.19)フィーネ
#format                            1.5)format指定
#include                           1.9)外部ファイル読み込み
#instrument                        1.11)楽器名
#lyric                             1.12)歌詞
#marker                            1.13)マーカー
#mask                              1.23)コンパイルマスク
#play                              1.3)演奏トラックリスト
#repeat                            1.18)繰り返し
#repcase                           1.18)分岐
#repend                            1.18)繰り返し終了
#sync                              1.21)同期
#text                              1.15)テキストイベント
#timebase                          1.6)タイムベース(時間分解能)
#title                             1.1)タイトル
#tocoda                            1.20)コーダへのジャンプ
#track                             1.10)トラック名
#unmask                            1.23)コンパイルマスク解除
#unplay                            1.4)非演奏トラックリスト

a        "n+9,"                    ラの音
b        "n+11,"                   シの音
c        "n+0,"                    ドの音
d        "n+2,"                    レの音
e        "n+4,"                    ミの音
f        "n+5,"                    ファの音
g        "n+7,"                    ソの音
i        PROGRAMCHANGE             2.5)プログラムチェンジ
l        DEFAULTLEN                2.13)デフォルト音長
m        "?$01,"                   モジュレーション
n        NOTE                      2.2)ノート
o        BASENOTE                  2.12)オクターブ指定
p        "?$0A,"                   パンポット
q        GATETIME                  2.15)ゲートタイム
r        REST                      2.3)休符
s        CHANGECHANNEL             2.23)チャンネル指定
t        TEMPO                     2.10)テンポ
v        DEFAULTVEL                2.14)デフォルトベロシティ
x        "?$0B,"                   エクスプレッション
A        "?$65,0 ?$64,0 ?$06,"     ピッチベンドセンシティビティ
C        "?$5D,"                   コーラス・センドレベル
D        DIVIDECHANNEL             2.19)チャンネル分割
E        EXCLUSIVE                 2.20)システムエクスクルーシブ
G        GS EXCLUSIVE              2.21)GS専用システムエクスクルーシブ
L        "?$5E,"                   ディレイ・センドレベル
M        MACROCALL                 2.22)マクロコール
N        "?$63,@1 ?$62,@2 ?$06,@3" NRPN
P        PITCHBEND                 2.8)ピッチベンド
R        "?$5B,"                   リバーブ・センドレベル
S        SEQUENCE                  2.17)連符
T        TRANSPOSE                 2.11)トランスポーズ
V        MASTERVOLUME              2.9)マスターボリューム
W        "?$65,0 ?$64,0 ?$06,"     モジュレーションセンシティビティ
X        "?$07,"                   チャンネルボリューム
!        OFF                       音消去
@        VAR                       マクロ変数
$        HEXADECIMAL               16進数
%        COMMENT                   2.1)コメント
^        TIE                       タイ
&        HOLD                      音保留（ホールド）
*        "?$78,0 "                 オール・サウンドオフ
(        "v-8 "                    ベロシティデクリメント
)        "v+8 "                    ベロシティインクリメント
-        FLAT                      フラット
-        DECREMENT                 相対的に減算
_        POLYKEYPRESS              2.6)ポリフォニックキープレッシャ
+        SHARP                     シャープ
+        INCREMENT                 相対的に加算
\        NL                        2.24)改行指定
[        REPEAT_BEGIN              2.18)繰り返しの最初
]        REPEAT_END                2.18)繰り返しの終了
{        CHORD_BEGIN               2.16)和音の最初
{        ENV_BEGIN                 環境（連符等で使用）の最初
}        CHORD_END                 2.16)和音の終了
}        ENV_END                   環境の終了
;        "?$7B,0 "                 オール・ノートオフ
:        CHANNEL                   チャンネル
'        CHANNELPRESS              2.7)チャンネルプレッシャ
"        QUOTATION                 文字列
<        "o-1 "                    ローワ・オクターヴァ
,        DELIMITER                 引数区切り
>        "o+1 "                    アッパー・オクターヴァ
.        HALF                      付点
?        CONTROLCHANGE             2.4)コントロールチェンジ
/        REPEAT_CASE               2.18)繰り返し分岐

------------------------------------------------------------
【参考文献】

MIDIバイブルI/II、リットーミュージック
SK-88Pro操作マニュアル、Roland
